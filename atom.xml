<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SuperYang`s Blog]]></title>
  <link href="http://yangchao0033.github.io/atom.xml" rel="self"/>
  <link href="http://yangchao0033.github.io/"/>
  <updated>2016-01-01T03:09:33+08:00</updated>
  <id>http://yangchao0033.github.io/</id>
  <author>
    <name><![CDATA[Super Yang]]></name>
    <email><![CDATA[757097678@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于@autoreleasepool的性能测试及手动释放自动释放池]]></title>
    <link href="http://yangchao0033.github.io/blog/2015/12/31/guan-yu-at-autoreleasepoolde-ce-shi-ji-shi-yong/"/>
    <updated>2015-12-31T11:47:01+08:00</updated>
    <id>http://yangchao0033.github.io/blog/2015/12/31/guan-yu-at-autoreleasepoolde-ce-shi-ji-shi-yong</id>
    <content type="html"><![CDATA[<p>首先，我们先对使用autoreleasepool的场景进行性能对比。</p>

<ul>
<li>不用autoreleasepool</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mf">10e6</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;hi + %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">collection</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;finished!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<p>不使用性能如下如所示：
<img src="http://lypxcnc-dl.yunpan.360.cn/intf.php?method=Preview.outputPic&amp;qid=246165388&amp;fname=%2Fmac%E5%A4%87%E4%BB%BD%2Fios%2F2015%2F11%2Fimage%2FSnip20151108_8.png&amp;fhash=f9b9a5146857df0e674211b4a81405c7bf0c5193&amp;dt=71.386154716d9b80a7a2c5b7517e7424a0&amp;v=1.0.1&amp;rtick=14515884295186&amp;open_app_id=0&amp;devtype=web&amp;sign=b2a0f819bcdc8ee3f2368017ba09df85&amp;" alt="不使用" /></p>

<ul>
<li>使用autoreleasepool</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mf">10e6</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>          <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;hi + %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">collection</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;finished!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
使用效果如下图所示：
<img src="http://d.pcs.baidu.com/thumbnail/2430b3c52659ed6040d1bd1b0caf00f4?fid=3643355266-250528-153089275883599&amp;time=1451588400&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-OOQTgjpbAx1aDaa9nBURvIsmtmY%3d&amp;expires=8h&amp;chkbd=0&amp;chkv=0&amp;dp-logid=2964101469645371&amp;dp-callid=0&amp;size=c10000_u10000&amp;quality=90" alt="使用autoreleasepool" /></p>

<p>综上，当需要在程序中创建大量的临时变量时（大量也可指数量多，不确定，比如从数据库中读取数据时）,很容易使内存产生峰值又回到内存低谷，这样对程序的性能会产生很大影响，而使用自动释放池后，峰值明显有所下降。<br/>
<code>原因：</code>由于在mian函数中已经为我们添加了自动释放池，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="k">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而当autoreleasepool的右括号结束后，会对整个autoreleasepool做一次倾倒。但是这会使其中局部产生的大量零时变量无法及时释放，直到for循环结束后抵达main中autoreleasepool的右括号位置才能释放。这样会在局部位置发生内存峰值。
官方提出的解决方案是，在大量产生局部变量的位置用autoreleasepool代码块进行包装。比如for循环中要执行的语句，这样每次for循环结束后就会及时收回临时变量占用的内存空间。</p>

<h1>思考：如何在指定的次数时，及时释放自动释放池中的临时变量</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="err">使用</span><span class="n">mrc</span><span class="err">下的特性</span>
</span><span class='line'><span class="err">在编译选项中，为</span><span class="n">MRC</span><span class="err">的程序添加</span><span class="o">-</span><span class="n">fno</span><span class="o">-</span><span class="n">objc</span><span class="o">-</span><span class="n">arc</span><span class="err">标记，表明在编译时，该文件使用</span><span class="n">MRC</span><span class="err">编译</span>
</span><span class='line'><span class="err">如果要在</span><span class="n">MRC</span><span class="err">项目中添加</span><span class="n">ARC</span><span class="err">的文件，可以使用</span> <span class="o">-</span><span class="n">fobjc</span><span class="o">-</span><span class="n">arc</span> <span class="err">标记即可</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的需求我们可以使用MRC时代的一个重量级的自动释放池，通常用来创建偶尔需要释放清空的池。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="l">@[]</span><span class="p">.</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSAutoreleasePool</span> <span class="o">*</span><span class="n">pool</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSAutoreleasePool</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mf">10e6</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;hi + %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">collection</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">count</span> <span class="o">==</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/** 每一百次倾倒一次池子 */</span>
</span><span class='line'>            <span class="p">[</span><span class="n">pool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/** 用来倾倒当i的个数不是100的倍数时，比如读取数据库数据时,数据总数为不确定值 */</span>
</span><span class='line'>    <span class="p">[</span><span class="n">pool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;finished!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于在storyboard中使用静态cell的注意事项]]></title>
    <link href="http://yangchao0033.github.io/blog/2015/12/30/guan-yu-zai-storyboardzhong-shi-yong-jing-tai-cellde-zhu-yi-shi-xiang/"/>
    <updated>2015-12-30T15:26:05+08:00</updated>
    <id>http://yangchao0033.github.io/blog/2015/12/30/guan-yu-zai-storyboardzhong-shi-yong-jing-tai-cellde-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<p> &ndash;关于在<em>storyboard</em>中使用静态TableViewCell的可变高度的使用技巧</p>

<p>起因:在storyboard使用之前，创建tableView视图，通常是采用代码控制数据源，通过数据源数据的长度来决定tableView中cell的个数，而这样做的好处还有就是可以通过将已经在界面中展示的cell放入缓存池中，以供后续数据展示再从缓存池中取出进行复用。这样做的好处是为了防止数据过大时创建大量的cell浪费不必要的空间。显而易见，tableView就是为了进行批量数据的展示。</p>

<!--more-->


<p> <br/>
然而，在现实开发中，会出现一种需求：展示的数据长度是确定的，而且需要向tableView一样实现视图上下滚动，单个cell视图可点击响应。这种情况下，继续使用原来的代码数据源控制一样可以实现，这时的数据源个数是确定的。即便如此，你也需要考虑处理cell滚动时发生的重用所带来的影响。而且当数据源确定时，你的产品经理绝对不甘于像平常一样每条数据都展示为同一个尺寸内容。而是会尽可能地在每个cell中加入丰富的控件，时间相应来是有限的tableView实现最为复杂的用户交互事件。此时，你会在自己的数据源拼命地书写if语句来保证视图的正确显示，又要避免发生未知的cell重用问题。<br/>
这样做是可行的，但是在主要时间将大量花费在处理有限个数cell上的逻辑处理，而并非我们所要实现的主要业务。<br/>
所以，在这种情况下，我们会考虑把这些重复而且无用的逻辑处理交给苹果自己搞定（当然，主要目的是为了偷懒^_^）<br/>
static cell，这是苹果为我们提供的解决方案。目前仅限于在storyboard中使用。</p>

<p> <code>static cell</code>的用法非常简单，这里不作为重点赘述，请大家自行学习。<br/>
  现在给大家这样一个场景，在你用<code>static cell</code>搭建好界面，然后轻松加愉快的拖拖控件，完成相关业务功能。<br/>
  上面老板开始验收项目，对产品  说你的界面不够详细，再改改。<br/>
  产品开始提需求，说我们的cell内容太少，需要在点击时展开详情。<br/>
  而恰好你用静态单元cell偷了个懒，现在要为了一个cell重新用动态cell写一遍？<br/>
  别闹了，明天还要和UI妹子去爬香山呢，绝壁不当加班狗。<br/>
  所以，我们开始探索静态cell的高度改变之旅。</p>

<hr />

<p>  方案一：
  既然我们可以将静态cell当做一个控件拖入控制器做属性。何不在代码中修改作为属性的静态cell的高度呢？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="nb">self</span><span class="p">.</span><span class="n">fuJianCell</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>     
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">fuJianCell</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>然并卵，这些方法对非cell的控件来说刷新高度足矣，然而<code>tableView</code>的高度始终是由代理来控制的，所以这样修改是没用的。<br/>
既然这样，我们就从高度代理入手。</p>

<hr />

<p>方案二：
通过代理入手，将每个cell的在storyBoard的设置高度用代码写到一个数组中，并通过代理返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">heightForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 变高行数</span>
</span><span class='line'>  <span class="bp">NSInteger</span> <span class="n">mutableHeightRow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 如果不展开</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">isOpen</span><span class="p">){</span>
</span><span class='line'>      <span class="nb">self</span><span class="p">.</span><span class="n">heights</span><span class="p">[</span><span class="n">mutableHeightRow</span><span class="p">]</span> <span class="o">=</span> <span class="l">@(</span><span class="err">原始高度</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">heights</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">self</span><span class="p">.</span><span class="n">heights</span><span class="p">[</span><span class="n">mutableHeightRow</span><span class="p">]</span> <span class="o">=</span> <span class="l">@(</span><span class="err">展开高度</span><span class="l">)</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">heights</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题解决，但是违背了我们的初衷，说好的交给苹果自己算呢，为毛要手动将高度存在数组中？</p>

<hr />

<p>方案三：
交给tableView的父类方法返回我们在storyboard中预设的高度，然后单独处理变高的cell高度</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="bp">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">heightForRowAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 变高行数</span>
</span><span class='line'>  <span class="bp">NSInteger</span> <span class="n">mutableHeightRow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="o">==</span> <span class="n">mutableHeightRow</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isOpen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 假设改行原来高度为200</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">tableView</span><span class="p">:</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/** 返回静态单元格故事板中的高度 */</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">tableView</span><span class="p">:</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完美~</p>

<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 注意别忘了,在修改展开状态的时候刷新表格</span>
</span><span class='line'>  <span class="n">isOpen</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，这样处理静态cell的方式不光可以处理可变高度，还可以用在数据源的section个数或者每个section的row的个数上，再或者指定让某个位置的cell使用动态cell其他使用静态cell，让我们的静态cell比动态cell更好用。其方法都是通过<code>super</code>关键字调用父类方法返回storyboard中存储的的相关数据。</p>

<p>至于原理，暂时还不清楚，推测使用了运行时动态创建一个支持静态cell的tableView的子类，我们实际使用的是这个新的tableView类的实例，或者使用<code>类簇</code>，利用私有子类进行了相关的静态cell的逻辑处理。</p>

<p>总之，这让我们省去了很多处理逻辑的代码。</p>

<p>参考文章：<a href="http://codego.net/513617/">UITableView的：在处理混合cell表视图的静态和动态的cell小区选择</a></p>
]]></content>
  </entry>
  
</feed>
